// Google Gemini Service - Integra√ß√£o com Google AI
import { GoogleGenerativeAI } from '@google/generative-ai';

export interface GeminiConfig {
  apiKey?: string;
  model?: string;
  temperature?: number;
  maxTokens?: number;
}

export class GeminiService {
  private client: GoogleGenerativeAI | null = null;
  private model: string = 'gemini-pro';
  private isConfigured: boolean = false;

  constructor(config?: GeminiConfig) {
    const apiKey = config?.apiKey || 
                   process.env.GOOGLE_API_KEY || 
                   '';

    if (apiKey && apiKey !== '' && !apiKey.includes('xxx')) {
      try {
        this.client = new GoogleGenerativeAI(apiKey);
        this.model = config?.model || this.model;
        this.isConfigured = true;
        console.log('‚úÖ Gemini configurado com sucesso');
      } catch (error) {
        console.error('‚ùå Erro ao configurar Gemini:', error);
        this.isConfigured = false;
      }
    } else {
      console.warn('‚ö†Ô∏è Gemini API Key n√£o configurada');
    }
  }

  // Verifica se est√° configurado
  isReady(): boolean {
    return this.isConfigured && this.client !== null;
  }

  // Processa mensagem com contexto de invent√°rio
  async processInventoryQuery(
    message: string,
    inventoryData?: any,
    sessionHistory?: any[]
  ): Promise<string> {
    if (!this.isReady()) {
      return 'Gemini n√£o est√° configurado.';
    }

    try {
      const model = this.client!.getGenerativeModel({ model: this.model });
      
      // Prepara o contexto
      let context = `Voc√™ √© o Wiser IA Assistant, especializado em gest√£o de invent√°rio.

CONTEXTO DO SISTEMA:
Voc√™ tem acesso a 100% dos dados do invent√°rio em tempo real.

`;

      // Adiciona dados do invent√°rio
      if (inventoryData) {
        if (inventoryData.stats) {
          context += `üìä ESTAT√çSTICAS COMPLETAS (100% DOS DADOS):
- Total de registros: ${inventoryData.stats.totalRecords || 0}
- Produtos √∫nicos: ${inventoryData.stats.uniqueProducts || 0}
- Saldo total: ${inventoryData.stats.totalBalance || 0} unidades
- Produtos bloqueados: ${inventoryData.stats.blockedProducts || 0}
- Com avaria: ${inventoryData.stats.damageProducts || 0}
- Vencidos: ${inventoryData.stats.expiredProducts || 0}
- Armaz√©ns: ${inventoryData.stats.warehouses?.join(', ') || 'N/A'}
- Locais: ${inventoryData.stats.locations || 0}

`;
        }
        
        if (inventoryData.queryResults && inventoryData.queryResults.length > 0) {
          context += `DADOS ESPEC√çFICOS DA CONSULTA:
${JSON.stringify(inventoryData.queryResults.slice(0, 20), null, 2).slice(0, 2000)}

`;
        }
      }

      // Adiciona hist√≥rico se dispon√≠vel
      if (sessionHistory && sessionHistory.length > 0) {
        context += `HIST√ìRICO DA CONVERSA:
`;
        sessionHistory.slice(-3).forEach(msg => {
          context += `${msg.role}: ${msg.content}\n`;
        });
        context += '\n';
      }

      // Adiciona a mensagem do usu√°rio
      const fullPrompt = `${context}

PERGUNTA DO USU√ÅRIO: ${message}

INSTRU√á√ïES:
1. Use os dados fornecidos para responder com precis√£o
2. Seja espec√≠fico com n√∫meros e quantidades
3. Destaque informa√ß√µes importantes com **negrito**
4. Use emojis apropriados (üì¶ üìä ‚úÖ ‚ö†Ô∏è ‚ùå)
5. Responda em portugu√™s brasileiro
6. Se n√£o tiver os dados, informe claramente

RESPOSTA:`;

      // Gera a resposta
      const result = await model.generateContent(fullPrompt);
      const response = result.response;
      
      return response.text() || 'Sem resposta do Gemini';
      
    } catch (error: any) {
      console.error('‚ùå Erro Gemini:', error);
      
      if (error.status === 429) {
        return '‚ö†Ô∏è Limite de requisi√ß√µes do Gemini excedido. Tente novamente em alguns segundos.';
      } else if (error.status === 401) {
        return '‚ùå API Key do Gemini inv√°lida. Verifique suas credenciais.';
      } else {
        return `‚ùå Erro ao processar com Gemini: ${error.message}`;
      }
    }
  }

  // An√°lise de tend√™ncias
  async analyzeTrends(data: any[]): Promise<string> {
    if (!this.isReady()) {
      return 'Gemini n√£o configurado';
    }

    const prompt = `
Analise os seguintes dados de invent√°rio e identifique:
1. Tend√™ncias principais
2. Produtos cr√≠ticos
3. Recomenda√ß√µes de a√ß√£o

Dados: ${JSON.stringify(data).slice(0, 3000)}
`;

    return this.processInventoryQuery(prompt);
  }

  // Gera√ß√£o de relat√≥rio
  async generateReport(data: any, type: string = 'summary'): Promise<string> {
    if (!this.isReady()) {
      return 'Gemini n√£o configurado';
    }

    const prompts: any = {
      summary: 'Crie um resumo executivo destes dados de invent√°rio',
      detailed: 'Crie um relat√≥rio detalhado com an√°lises e recomenda√ß√µes',
      critical: 'Identifique apenas itens cr√≠ticos que precisam aten√ß√£o imediata'
    };

    const prompt = `${prompts[type] || prompts.summary}\n\nDados: ${JSON.stringify(data).slice(0, 3000)}`;
    
    return this.processInventoryQuery(prompt);
  }
}