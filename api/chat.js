// Chat API com integra√ß√£o Supabase usando NEXT_PUBLIC_ (m√©todo que funcionou)
import { GoogleGenerativeAI } from '@google/generative-ai';
import { getEstoqueData } from './supabase-client.js';

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

export default async function handler(req, res) {
  // Habilitar CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message } = req.body;

    if (!message) {
      return res.status(400).json({ error: 'Mensagem n√£o pode estar vazia' });
    }

    console.log('üì® Processando mensagem:', message);

    // Buscar dados do estoque usando Supabase Client (m√©todo NEXT_PUBLIC_)
    let estoqueData = [];
    let dbStatus = 'not_connected';
    
    try {
      console.log('üîÑ Buscando TODOS os dados do estoque via Supabase (sem limite)...');
      estoqueData = await getEstoqueData(); // Sem limite - busca todos os registros
      
      if (estoqueData && estoqueData.length > 0) {
        console.log(`‚úÖ ${estoqueData.length} produtos carregados do estoque`);
        dbStatus = 'connected';
        
        // Validar e limpar dados
        estoqueData = estoqueData.map(item => ({
          ...item,
          saldo_disponivel_produto: parseFloat(item.saldo_disponivel_produto) || 0,
          saldo_reservado_produto: parseFloat(item.saldo_reservado_produto) || 0,
          saldo_bloqueado_produto: item.saldo_bloqueado_produto === 'Vencido' || item.saldo_bloqueado_produto === 'Avaria' 
            ? item.saldo_bloqueado_produto 
            : (parseFloat(item.saldo_bloqueado_produto) || 0)
        }));
        
        // Calcular estat√≠sticas corretas
        const totalGeral = estoqueData.reduce((sum, p) => sum + p.saldo_disponivel_produto, 0);
        const produtosCodigos = [...new Set(estoqueData.map(p => p.codigo_produto))];
        
        console.log('üìä Estat√≠sticas do estoque:');
        console.log(`  - Total de registros: ${estoqueData.length}`);
        console.log(`  - Produtos √∫nicos: ${produtosCodigos.length}`);
        console.log(`  - Saldo total dispon√≠vel: ${totalGeral.toFixed(2)} unidades`);
        
        // Log dos primeiros produtos para debug
        console.log('Amostra dos dados:', estoqueData.slice(0, 3));
      } else {
        console.log('‚ö†Ô∏è Nenhum produto encontrado no estoque');
        dbStatus = 'empty';
      }
    } catch (dbError) {
      console.error('‚ùå Erro ao conectar com Supabase:', dbError);
      dbStatus = 'error';
    }

    // Criar contexto do sistema com os dados do estoque
    let systemPrompt = `Voc√™ √© o Wiser IA Assistant, um assistente especializado em gerenciamento de estoque com acesso COMPLETO a TODOS os dados.
    
${estoqueData.length > 0 ? `
üì¶ DADOS COMPLETOS DO ESTOQUE (TODOS OS ${estoqueData.length} REGISTROS):
=====================================
${JSON.stringify(estoqueData, null, 2)}
=====================================

INSTRU√á√ïES PARA RESPOSTAS ORGANIZADAS E L√ìGICAS:

1. AN√ÅLISE DOS DADOS:
   - Voc√™ tem acesso a TODOS os ${estoqueData.length} registros do estoque
   - SEMPRE procure nos dados fornecidos antes de responder
   - NUNCA invente informa√ß√µes - use apenas os dados reais

2. ORGANIZA√á√ÉO DA RESPOSTA:
   - Comece com um t√≠tulo claro do que est√° respondendo
   - Use formata√ß√£o markdown para melhor legibilidade
   - Organize informa√ß√µes em t√≥picos ou tabelas quando apropriado
   - Sempre forne√ßa n√∫meros exatos dos dados

3. C√ÅLCULOS PRECISOS:
   - Para saldo de produto: SOME saldo_disponivel_produto de todos os lotes
   - Para totais: AGRUPE por c√≥digo_produto e depois some
   - Ignore textos "Vencido"/"Avaria" em campos num√©ricos
   - Formate n√∫meros no padr√£o brasileiro (1.234,56)

4. ESTRUTURA L√ìGICA:
   - Resposta direta primeiro (o que foi perguntado)
   - Detalhes relevantes em seguida
   - Informa√ß√µes adicionais √∫teis por √∫ltimo
   - Sempre em portugu√™s do Brasil

5. EXEMPLO DE RESPOSTA ORGANIZADA:
   "üì¶ **Produto X - Descri√ß√£o**
   
   **Saldo Total**: X.XXX unidades
   **Lotes**: XX diferentes
   **Localiza√ß√£o**: Armaz√©m Y
   
   **Detalhes por Lote**:
   1. Lote ABC: XXX unidades
   2. Lote DEF: XXX unidades
   ..."

CAPACIDADES COM DADOS COMPLETOS:
- Acesso a TODOS os ${estoqueData.length} registros do estoque
- Buscar qualquer produto por c√≥digo ou descri√ß√£o
- Calcular saldos totais somando todos os lotes
- Listar todos os lotes de um produto
- Analisar produtos vencidos ou com avaria
- Estat√≠sticas completas do invent√°rio
` : `
‚ö†Ô∏è ATEN√á√ÉO: N√£o foi poss√≠vel carregar os dados do estoque.

Poss√≠veis causas:
1. As credenciais do Supabase n√£o est√£o configuradas (NEXT_PUBLIC_SUPABASE_URL e NEXT_PUBLIC_SUPABASE_ANON_KEY)
2. A tabela 'estoque' n√£o existe ou est√° vazia
3. Problema de conectividade com o banco de dados

Por favor, verifique as configura√ß√µes no Vercel.
`}

Responda sempre em portugu√™s do Brasil de forma clara, profissional e √∫til.`;

    // Verificar se tem Google API Key
    if (!process.env.GOOGLE_API_KEY) {
      console.log('‚ùå Google API Key n√£o encontrada');
      return res.status(200).json({
        response: `‚ö†Ô∏è API do Google n√£o configurada!

Para configurar:
1. Obtenha sua API key em: https://aistudio.google.com
2. No Vercel, adicione GOOGLE_API_KEY nas Environment Variables
3. Fa√ßa redeploy do projeto

Status do banco: ${dbStatus}
Produtos no estoque: ${estoqueData.length}`,
        estoqueLoaded: false,
        dbStatus
      });
    }

    // SEMPRE usar IA para processar TODOS os dados sem limita√ß√£o
    console.log(`ü§ñ Enviando TODOS os ${estoqueData.length} registros para a IA processar...`);
    
    let text = '';
    
    try {
      // Usar o modelo mais recente e poderoso do Gemini
      const model = genAI.getGenerativeModel({ 
        model: "gemini-1.5-flash",
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        }
      });
      
      // Criar prompt completo com TODOS os dados
      const fullPrompt = systemPrompt + '\n\n' + 
                        'PERGUNTA DO USU√ÅRIO: ' + message + '\n\n' +
                        'RESPONDA DE FORMA ORGANIZADA E L√ìGICA USANDO OS DADOS FORNECIDOS.';
      
      console.log(`üì§ Processando com IA: ${estoqueData.length} registros completos`);
      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      text = response.text();
      console.log('‚úÖ IA processou todos os dados e gerou resposta organizada');
      
    } catch (aiError) {
      console.error('‚ùå Erro ao processar com IA:', aiError);
      
      // Fallback b√°sico apenas se a IA falhar
      if (estoqueData.length > 0) {
        text = `‚ö†Ô∏è Erro ao processar com IA.\n\n`;
        text += `Informa√ß√µes dispon√≠veis:\n`;
        text += `- Total de registros: ${estoqueData.length}\n`;
        text += `- Produtos √∫nicos: ${[...new Set(estoqueData.map(p => p.codigo_produto))].length}\n`;
        text += `\nPor favor, verifique se a GOOGLE_API_KEY est√° configurada no Vercel.`;
      } else {
        throw aiError;
      }
    }

    // Adicionar indicador se usou dados do banco
    if (estoqueData.length > 0) {
      text += "\n\nüìä *[Resposta baseada em dados reais do estoque]*";
    }

    res.status(200).json({ 
      response: text,
      estoqueLoaded: estoqueData.length > 0,
      totalProdutos: estoqueData.length,
      dbStatus
    });

  } catch (error) {
    console.error('‚ùå Erro na API do Chat:', error);
    
    let errorMessage = 'Erro ao processar mensagem';
    
    if (error.message?.includes('API_KEY_INVALID')) {
      errorMessage = 'API Key do Google inv√°lida. Verifique a configura√ß√£o.';
    } else if (error.message?.includes('401')) {
      errorMessage = 'Erro de autentica√ß√£o. Verifique as credenciais do Supabase.';
    }
    
    res.status(500).json({ 
      error: errorMessage,
      details: error.message,
      estoqueLoaded: false
    });
  }
}