// Chat API com integra√ß√£o Supabase usando NEXT_PUBLIC_ (m√©todo que funcionou)
import { GoogleGenerativeAI } from '@google/generative-ai';
import { getEstoqueData } from './supabase-client.js';

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

export default async function handler(req, res) {
  // Habilitar CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message } = req.body;

    if (!message) {
      return res.status(400).json({ error: 'Mensagem n√£o pode estar vazia' });
    }

    console.log('üì® Processando mensagem:', message);

    // Buscar dados do estoque usando Supabase Client (m√©todo NEXT_PUBLIC_)
    let estoqueData = [];
    let dbStatus = 'not_connected';
    
    try {
      console.log('üîÑ Buscando dados do estoque via Supabase...');
      estoqueData = await getEstoqueData(100);
      
      if (estoqueData && estoqueData.length > 0) {
        console.log(`‚úÖ ${estoqueData.length} produtos carregados do estoque`);
        dbStatus = 'connected';
        
        // Log dos primeiros produtos para debug
        console.log('Amostra dos dados:', estoqueData.slice(0, 3));
      } else {
        console.log('‚ö†Ô∏è Nenhum produto encontrado no estoque');
        dbStatus = 'empty';
      }
    } catch (dbError) {
      console.error('‚ùå Erro ao conectar com Supabase:', dbError);
      dbStatus = 'error';
    }

    // Criar contexto do sistema com os dados do estoque
    let systemPrompt = `Voc√™ √© o Wiser IA Assistant, um assistente especializado em gerenciamento de estoque.
    
${estoqueData.length > 0 ? `
üì¶ DADOS REAIS DO ESTOQUE (${estoqueData.length} produtos):
=====================================
${JSON.stringify(estoqueData, null, 2)}
=====================================

INSTRU√á√ïES IMPORTANTES:
1. Use SEMPRE os dados acima para responder sobre o estoque
2. Cite produtos espec√≠ficos, quantidades e informa√ß√µes exatas
3. Se perguntado sobre um produto que n√£o est√° na lista, informe que n√£o est√° no estoque
4. Forne√ßa an√°lises detalhadas quando solicitado
5. Sempre responda em portugu√™s do Brasil

CAPACIDADES:
- Listar produtos dispon√≠veis
- Informar quantidades em estoque
- Buscar produtos por nome ou categoria
- Calcular totais e estat√≠sticas
- Sugerir produtos relacionados
` : `
‚ö†Ô∏è ATEN√á√ÉO: N√£o foi poss√≠vel carregar os dados do estoque.

Poss√≠veis causas:
1. As credenciais do Supabase n√£o est√£o configuradas (NEXT_PUBLIC_SUPABASE_URL e NEXT_PUBLIC_SUPABASE_ANON_KEY)
2. A tabela 'estoque' n√£o existe ou est√° vazia
3. Problema de conectividade com o banco de dados

Por favor, verifique as configura√ß√µes no Vercel.
`}

Responda sempre em portugu√™s do Brasil de forma clara, profissional e √∫til.`;

    // Verificar se tem Google API Key
    if (!process.env.GOOGLE_API_KEY) {
      return res.status(200).json({
        response: `‚ö†Ô∏è API do Google n√£o configurada!

Para configurar:
1. Obtenha sua API key em: https://aistudio.google.com
2. No Vercel, adicione GOOGLE_API_KEY nas Environment Variables
3. Fa√ßa redeploy do projeto

Status do banco: ${dbStatus}
Produtos no estoque: ${estoqueData.length}`,
        estoqueLoaded: false,
        dbStatus
      });
    }

    // Gerar resposta com o Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent([systemPrompt, message]);
    const response = await result.response;
    let text = response.text();

    // Adicionar indicador se usou dados do banco
    if (estoqueData.length > 0) {
      text += "\n\nüìä *[Resposta baseada em dados reais do estoque]*";
    }

    res.status(200).json({ 
      response: text,
      estoqueLoaded: estoqueData.length > 0,
      totalProdutos: estoqueData.length,
      dbStatus
    });

  } catch (error) {
    console.error('‚ùå Erro na API do Chat:', error);
    
    let errorMessage = 'Erro ao processar mensagem';
    
    if (error.message?.includes('API_KEY_INVALID')) {
      errorMessage = 'API Key do Google inv√°lida. Verifique a configura√ß√£o.';
    } else if (error.message?.includes('401')) {
      errorMessage = 'Erro de autentica√ß√£o. Verifique as credenciais do Supabase.';
    }
    
    res.status(500).json({ 
      error: errorMessage,
      details: error.message,
      estoqueLoaded: false
    });
  }
}